pipeline {
   agent {
       docker {
           image 'eddevopsd2/maven-java-npm-docker:mvn3.8.5-jdk17-node18.16-go1.20-docker'
           args '-v /root/.m2/Qlack-Java:/root/.m2'
       }
   }
   options {
       disableConcurrentBuilds()
       buildDiscarder(logRotator(numToKeepStr: '10'))
   }
    stages {
        stage ('Prompt for Input') {
            steps {
                script {
                    env.RELEASE_VERSION = input message: 'Release version:',
                                     parameters: [string(defaultValue: '',
                                                  description: 'Attention: Do not push to git until this job finishes.',
                                                  name: 'Release version')]
                    env.NEXT_DEV_VERSION = input message: 'Snapshot version:',
                                     parameters: [string(defaultValue: '',
                                                  description: '',
                                                  name: 'Next development version')]
                }
            }
        }
        stage('Clone project') {
            steps{
                withCredentials([usernamePassword(credentialsId: 'Jenkins Github token',
                usernameVariable: 'Username',
                passwordVariable: 'Password')]){
                    sh '''
                        git remote set-url origin https://$Username:$Password@github.com/qlack/QLACK-Base-Application.git
                        git config --global user.email "devops-d2@eurodyn.com"
                        git config --global user.name "$Username"
                        git fetch --tags --force
                        mvn -f qlack-base-application-server/pom.xml versions:set -DnewVersion=$RELEASE_VERSION
                        mvn -f qlack-base-application-server/pom.xml versions:commit
                    '''
                }
            }
        }
        stage('Updates for release version') {
            steps{
                sh '''
                    cd QLACK-Base-Application/qlack-base-application-server
                    mvn -f qlack-base-application-server/pom.xml versions:set -DnewVersion=$RELEASE_VERSION
                    mvn -f qlack-base-application-server/pom.xml versions:commit

                    cd ../qlack-base-application-ui
                    sed -i 's|\"version\":.*$|\"version\": \"'$RELEASE_VERSION'\",|' package.json
                    awk -v sb='  \"name\": \"qlack-base-application-ui\",\n  \"version\": \"'$RELEASE_VERSION'\",' '/"name": "qlack-base-application-ui",/,/"version":.*/ { if ( $0 ~ /"version":.*/ ) print sb; next } 1' package-lock.json > temp.json && cp -f temp.json package-lock.json && rm temp.json

                    cd ..
                    sed -i "s|qlack/qba-ui:.*$|qlack/qba-ui:$RELEASE_VERSION|" docker-compose.yml
                    sed -i "s|qlack/qba-server:.*$|qlack/qba-server:$RELEASE_VERSION|" docker-compose.yml
                '''
            }
        }
        stage ('Push changes for release version') {
            steps{
                withCredentials([usernamePassword(credentialsId: 'Jenkins Github token',
                usernameVariable: 'Username',
                passwordVariable: 'Password')]){
                    sh '''
                        cd QLACK-Base-Application
                        git remote set-url origin https://$Username:$Password@github.com/qlack/QLACK-Base-Application.git
                        git commit -a -m "release: prepare release $RELEASE_VERSION for QLACK-Base-Application"
                        git tag -a $RELEASE_VERSION -m "$RELEASE_VERSION"
                        git push https://$Username:$Password@github.com/qlack/QLACK-Base-Application.git HEAD:master --tags
                    '''
                }
            }
        }
        stage('Updates for next development version') {
            steps{
                sh '''
                    cd QLACK-Base-Application/qlack-base-application-server
                    mvn -f qlack-base-application-server/pom.xml versions:set -DnewVersion=$NEXT_DEV_VERSION
                    mvn -f qlack-base-application-server/pom.xml versions:commit

                    cd ../qlack-base-application-ui
                    sed -i 's|\"version\":.*$|\"version\": \"'$NEXT_DEV_VERSION'\",|' package.json
                    awk -v sb='  \"name\": \"qlack-base-application-ui\",\n  \"version\": \"'$NEXT_DEV_VERSION'\",' '/"name": "qlack-base-application-ui",/,/"version":.*/ { if ( $0 ~ /"version":.*/ ) print sb; next } 1' package-lock.json > temp.json && cp -f temp.json package-lock.json && rm temp.json
                '''
            }
        }
        stage ('Push changes for next development version') {
            steps{
                withCredentials([usernamePassword(credentialsId: 'Jenkins Github token',
                usernameVariable: 'Username',
                passwordVariable: 'Password')]){
                    sh '''
                        cd QLACK-Base-Application
                        git commit -a -m "release: prepare for next development iteration $NEXT_DEV_VERSION for QLACK-Base-Application"
                        git push https://$Username:$Password@github.com/qlack/QLACK-Base-Application.git HEAD:master
                    '''
                }
            }
        }
    }
    post {
        changed {
            script {
                if (currentBuild.result == 'SUCCESS') {
                        rocketSend avatar: "http://d2-np.eurodyn.com/jenkins/jenkins.png", channel: 'qlack', message: ":white_check_mark: | ${BUILD_URL} \n\nRelease succeeded on branch *${env.BRANCH_NAME}* \nChangelog: ${getChangeString(10)}", rawMessage: true
                } else {
                        rocketSend avatar: "http://d2-np.eurodyn.com/jenkins/jenkins.png", channel: 'qlack', message: ":x: | ${BUILD_URL} \n\nRelease failed on branch *${env.BRANCH_NAME}* \nChangelog: ${getChangeString(10)}", rawMessage: true
                }
            }
        }
    }
}
@NonCPS
def getChangeString(maxMessages) {
    MAX_MSG_LEN = 100
    def changeString = ""

    def changeLogSets = currentBuild.changeSets

    for (int i = 0; i < changeLogSets.size(); i++) {
        def entries = changeLogSets[i].items
        for (int j = 0; j < entries.length && i + j < maxMessages; j++) {
            def entry = entries[j]
            truncated_msg = entry.msg.take(MAX_MSG_LEN)
            changeString += "*${truncated_msg}* _by author ${entry.author}_\n"
        }
    }

    if (!changeString) {
        changeString = " There have not been any changes since the last build"
    }

    return changeString
}